{"ast":null,"code":"var _jsxFileName = \"C:\\\\AEM-spa-tutorial\\\\Code\\\\aem-guides-wknd-graphql\\\\remote-spa-tutorial\\\\react-app\\\\src\\\\utils\\\\renderRichText.js\";\n/*\r\nCopyright 2022 Adobe\r\nAll Rights Reserved.\r\n\r\nNOTICE: Adobe permits you to use, modify, and distribute this file in\r\naccordance with the terms of the Adobe license agreement accompanying\r\nit.\r\n*/\nimport React, { isValidElement, cloneElement } from 'react';\n\n/**\r\n * Map of JSON nodeTypes to HTML formats\r\n */\nconst defaultNodeMap = {\n  'header': (node, children, style) => {\n    var _style$node$style;\n    return (_style$node$style = style[node.style]) === null || _style$node$style === void 0 ? void 0 : _style$node$style.call(style, node, children);\n  },\n  'paragraph': (node, children) => /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 38\n    }\n  }, children),\n  'unordered-list': (node, children) => /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 43\n    }\n  }, children),\n  'ordered-list': (node, children) => /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 41\n    }\n  }, children),\n  'list-item': (node, children) => /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 38\n    }\n  }, children),\n  'table': (node, children) => /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 34\n    }\n  }, children),\n  'table-body': (node, children) => /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 39\n    }\n  }, children),\n  'table-row': (node, children) => /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 38\n    }\n  }, children),\n  'table-data': (node, children) => /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 39\n    }\n  }, children),\n  'link': node => /*#__PURE__*/React.createElement(\"a\", {\n    href: node.data.href,\n    target: node.data.target,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }\n  }, node.value),\n  'text': (node, format) => defaultRenderText(node, format),\n  'reference': node => defaultRenderImage(node)\n};\n\n/**\r\n * Map of JSON format variants to HTML equivalents\r\n */\nconst defaultTextFormat = {\n  'bold': value => /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 24\n    }\n  }, value),\n  'italic': value => /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 26\n    }\n  }, value),\n  'underline': value => /*#__PURE__*/React.createElement(\"u\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 29\n    }\n  }, value)\n};\n\n/**\r\n * Map of Header styles \r\n */\nconst defaultHeaderStyle = {\n  'h1': (node, children) => /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 31\n    }\n  }, children),\n  'h2': (node, children) => /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 31\n    }\n  }, children),\n  'h3': (node, children) => /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 31\n    }\n  }, children)\n};\n\n/**\r\n * Default renderer of Text nodeTypes\r\n * @param {*} node \r\n * @returns \r\n */\nfunction defaultRenderText(node, format) {\n  var _node$format, _node$format$variants;\n  // iterate over variants array to append formatting\n  if (((_node$format = node.format) === null || _node$format === void 0 ? void 0 : (_node$format$variants = _node$format.variants) === null || _node$format$variants === void 0 ? void 0 : _node$format$variants.length) > 0) {\n    return node.format.variants.reduce((previousValue, currentValue) => {\n      var _format$currentValue, _format$currentValue2;\n      return (_format$currentValue = (_format$currentValue2 = format[currentValue]) === null || _format$currentValue2 === void 0 ? void 0 : _format$currentValue2.call(format, previousValue)) !== null && _format$currentValue !== void 0 ? _format$currentValue : null;\n    }, node.value);\n  }\n  // if no formatting, simply return the value of the text\n  return node.value;\n}\n\n/**\r\n * Renders an image based on a reference\r\n * @param {*} node \r\n */\nfunction defaultRenderImage(node) {\n  var _node$data;\n  const mimeType = (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.mimetype;\n  if (mimeType && mimeType.startsWith('image')) {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      src: node.data.path,\n      alt: 'reference',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 16\n      }\n    });\n  }\n  return null;\n}\n\n/**\r\n * Appends a key to valid React Elements \r\n * (avoids having to pass an index everywhere)\r\n * @param {*} element \r\n * @param {*} key \r\n * @returns \r\n */\nfunction addKeyToElement(element, key) {\n  if (isValidElement(element) && element.key === null) {\n    return cloneElement(element, {\n      key\n    });\n  }\n  return element;\n}\n\n/**\r\n * Iterates over an array of nodes and renders each node\r\n * @param {*} childNodes array of \r\n * @returns \r\n */\nfunction renderNodeList(childNodes, options) {\n  if (childNodes && options) {\n    return childNodes.map((node, index) => {\n      return addKeyToElement(renderNode(node, options), index);\n    });\n  }\n  return null;\n}\n\n/**\r\n * Renders an individual node based on nodeType.\r\n * Makes a recursive call to render any children of the current node (node.content)\r\n * @param {*} node \r\n * @param {*} options \r\n * @returns \r\n */\nfunction renderNode(node, options) {\n  var _nodeMap$node$nodeTyp3, _nodeMap$node$nodeTyp4;\n  const {\n    nodeMap,\n    textFormat,\n    headerStyle\n  } = options;\n\n  // null check\n  if (!node || !options) {\n    return null;\n  }\n  const children = node.content ? renderNodeList(node.content, options) : null;\n\n  // special case for header, since it requires processing of header styles\n  if (node.nodeType === 'header') {\n    var _nodeMap$node$nodeTyp;\n    return (_nodeMap$node$nodeTyp = nodeMap[node.nodeType]) === null || _nodeMap$node$nodeTyp === void 0 ? void 0 : _nodeMap$node$nodeTyp.call(nodeMap, node, children, headerStyle);\n  }\n\n  // special case for text, since it may require formatting (i.e bold, italic, underline)\n  if (node.nodeType === 'text') {\n    var _nodeMap$node$nodeTyp2;\n    return (_nodeMap$node$nodeTyp2 = nodeMap[node.nodeType]) === null || _nodeMap$node$nodeTyp2 === void 0 ? void 0 : _nodeMap$node$nodeTyp2.call(nodeMap, node, textFormat);\n  }\n\n  // use a map to render the current node based on its nodeType\n  // pass the children (if they exist)\n  return (_nodeMap$node$nodeTyp3 = (_nodeMap$node$nodeTyp4 = nodeMap[node.nodeType]) === null || _nodeMap$node$nodeTyp4 === void 0 ? void 0 : _nodeMap$node$nodeTyp4.call(nodeMap, node, children)) !== null && _nodeMap$node$nodeTyp3 !== void 0 ? _nodeMap$node$nodeTyp3 : null;\n}\n\n/**\r\n * Expose the utility as a public function mapJsonRichText.\r\n * Calling functions can choose to override various mappings and/or formatting \r\n * by passing in an `options` object that may contain overrides for `nodeMap`, `textFormat` and `headerStyle`\r\n * @param {*} json - the json response of a Multi Line rich text field\r\n * @param {*} options {nodeMap,  - override defaultNodeMap\r\n *                     textFormat, - override defaultTextFormat\r\n *                     headerStyle, - override defaultHeaderStyle \r\n *                     }\r\n * @returns a JSX representation of the JSON object\r\n */\nexport function mapJsonRichText(json, options = {}) {\n  // merge options override with default options for nodeMap, textFormat, and headerStyle\n  return renderNodeList(json, {\n    nodeMap: {\n      ...defaultNodeMap,\n      ...options.nodeMap\n    },\n    textFormat: {\n      ...defaultTextFormat,\n      ...options.textFormat\n    },\n    headerStyle: {\n      ...defaultHeaderStyle,\n      ...options.headerStyle\n    }\n  });\n}","map":{"version":3,"names":["React","isValidElement","cloneElement","defaultNodeMap","header","node","children","style","_style$node$style","call","paragraph","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","unordered-list","ordered-list","list-item","table","table-body","table-row","table-data","href","data","target","value","text","format","defaultRenderText","defaultRenderImage","defaultTextFormat","defaultHeaderStyle","h1","h2","h3","_node$format","_node$format$variants","variants","length","reduce","previousValue","currentValue","_format$currentValue","_format$currentValue2","_node$data","mimeType","mimetype","startsWith","src","path","alt","addKeyToElement","element","key","renderNodeList","childNodes","options","map","index","renderNode","_nodeMap$node$nodeTyp3","_nodeMap$node$nodeTyp4","nodeMap","textFormat","headerStyle","content","nodeType","_nodeMap$node$nodeTyp","_nodeMap$node$nodeTyp2","mapJsonRichText","json"],"sources":["C:/AEM-spa-tutorial/Code/aem-guides-wknd-graphql/remote-spa-tutorial/react-app/src/utils/renderRichText.js"],"sourcesContent":["/*\r\nCopyright 2022 Adobe\r\nAll Rights Reserved.\r\n\r\nNOTICE: Adobe permits you to use, modify, and distribute this file in\r\naccordance with the terms of the Adobe license agreement accompanying\r\nit.\r\n*/\r\nimport React, { isValidElement, cloneElement } from 'react';\r\n\r\n/**\r\n * Map of JSON nodeTypes to HTML formats\r\n */\r\nconst defaultNodeMap = {\r\n    'header': (node, children, style) => style[node.style]?.(node, children),\r\n    'paragraph': (node, children) => <p>{children}</p>,\r\n    'unordered-list': (node, children) => <ul>{children}</ul>,\r\n    'ordered-list': (node, children) => <ol>{children}</ol>,\r\n    'list-item': (node, children) => <li>{children}</li>,\r\n    'table': (node, children) => <table>{children}</table>,\r\n    'table-body': (node, children) => <tbody>{children}</tbody>,\r\n    'table-row': (node, children) => <tr>{children}</tr>,\r\n    'table-data': (node, children) => <td>{children}</td>,\r\n    'link': node => <a href={node.data.href} target={node.data.target}>{node.value}</a>,\r\n    'text': (node, format) => defaultRenderText(node, format),\r\n    'reference': (node) => defaultRenderImage(node),\r\n}\r\n\r\n/**\r\n * Map of JSON format variants to HTML equivalents\r\n */\r\nconst defaultTextFormat = {\r\n    'bold': (value) => <b>{value}</b>,\r\n    'italic': (value) => <i>{value}</i>,\r\n    'underline': (value) => <u>{value}</u>\r\n}\r\n\r\n/**\r\n * Map of Header styles \r\n */\r\nconst defaultHeaderStyle = {\r\n    'h1': (node, children) => <h1>{children}</h1>,\r\n    'h2': (node, children) => <h2>{children}</h2>,\r\n    'h3': (node, children) => <h3>{children}</h3>\r\n}\r\n\r\n/**\r\n * Default renderer of Text nodeTypes\r\n * @param {*} node \r\n * @returns \r\n */\r\nfunction defaultRenderText(node, format) {\r\n    // iterate over variants array to append formatting\r\n    if (node.format?.variants?.length > 0) {\r\n        return node.format.variants.reduce((previousValue, currentValue) => {\r\n            return format[currentValue]?.(previousValue) ?? null;\r\n        }, node.value);\r\n    }\r\n    // if no formatting, simply return the value of the text\r\n    return node.value;\r\n}\r\n\r\n/**\r\n * Renders an image based on a reference\r\n * @param {*} node \r\n */\r\nfunction defaultRenderImage(node) {\r\n    const mimeType = node.data?.mimetype;\r\n    if(mimeType && mimeType.startsWith('image')) {\r\n        return <img src={node.data.path} alt={'reference'} />\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * Appends a key to valid React Elements \r\n * (avoids having to pass an index everywhere)\r\n * @param {*} element \r\n * @param {*} key \r\n * @returns \r\n */\r\nfunction addKeyToElement(element, key) {\r\n    if (isValidElement(element) && element.key === null) {\r\n      return cloneElement(element, { key });\r\n    }\r\n    return element;\r\n}\r\n\r\n/**\r\n * Iterates over an array of nodes and renders each node\r\n * @param {*} childNodes array of \r\n * @returns \r\n */\r\nfunction renderNodeList(childNodes, options) {\r\n    if(childNodes && options) {\r\n        return childNodes.map((node, index) => {\r\n            return addKeyToElement(renderNode(node, options), index);\r\n        });\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Renders an individual node based on nodeType.\r\n * Makes a recursive call to render any children of the current node (node.content)\r\n * @param {*} node \r\n * @param {*} options \r\n * @returns \r\n */\r\nfunction renderNode(node, options) {\r\n    const {nodeMap, textFormat, headerStyle} = options;\r\n\r\n    // null check\r\n    if(!node || !options) {\r\n        return null;\r\n    }\r\n\r\n    const children = node.content ? renderNodeList(node.content, options) : null;\r\n\r\n    // special case for header, since it requires processing of header styles\r\n    if(node.nodeType === 'header') {\r\n        return nodeMap[node.nodeType]?.(node, children, headerStyle);\r\n    }\r\n\r\n    // special case for text, since it may require formatting (i.e bold, italic, underline)\r\n    if(node.nodeType === 'text') {\r\n        return nodeMap[node.nodeType]?.(node, textFormat);\r\n    }\r\n\r\n    // use a map to render the current node based on its nodeType\r\n    // pass the children (if they exist)\r\n    return nodeMap[node.nodeType]?.(node, children) ?? null;\r\n}\r\n\r\n/**\r\n * Expose the utility as a public function mapJsonRichText.\r\n * Calling functions can choose to override various mappings and/or formatting \r\n * by passing in an `options` object that may contain overrides for `nodeMap`, `textFormat` and `headerStyle`\r\n * @param {*} json - the json response of a Multi Line rich text field\r\n * @param {*} options {nodeMap,  - override defaultNodeMap\r\n *                     textFormat, - override defaultTextFormat\r\n *                     headerStyle, - override defaultHeaderStyle \r\n *                     }\r\n * @returns a JSX representation of the JSON object\r\n */\r\nexport function mapJsonRichText(json, options={}) {\r\n    // merge options override with default options for nodeMap, textFormat, and headerStyle\r\n    return renderNodeList(json , {\r\n        nodeMap: {\r\n            ...defaultNodeMap,\r\n            ...options.nodeMap,\r\n        },\r\n        textFormat: {\r\n            ...defaultTextFormat,\r\n            ...options.textFormat,\r\n        },\r\n        headerStyle: {\r\n            ...defaultHeaderStyle,\r\n            ...options.headerStyle\r\n        }\r\n    });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}